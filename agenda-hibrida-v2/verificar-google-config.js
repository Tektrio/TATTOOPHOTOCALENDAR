#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o da Configura√ß√£o Google
 * Verifica todas as configura√ß√µes necess√°rias para conectar com Google
 */

const fs = require('fs-extra');
const path = require('path');
require('dotenv').config();

console.log('\nüîç Verifica√ß√£o de Configura√ß√£o Google\n');
console.log('‚ïê'.repeat(60));

const issues = [];
const warnings = [];
const success = [];

// 1. Verificar arquivo .env
console.log('\nüìã 1. Verificando arquivo .env...');
if (!fs.existsSync('.env')) {
  issues.push('‚ùå Arquivo .env n√£o encontrado');
} else {
  success.push('‚úÖ Arquivo .env existe');
}

// 2. Verificar GOOGLE_CLIENT_ID
console.log('üìã 2. Verificando GOOGLE_CLIENT_ID...');
if (!process.env.GOOGLE_CLIENT_ID) {
  issues.push('‚ùå GOOGLE_CLIENT_ID n√£o configurado no .env');
} else if (process.env.GOOGLE_CLIENT_ID === 'your_google_client_id_here') {
  issues.push('‚ùå GOOGLE_CLIENT_ID ainda est√° com valor padr√£o');
} else {
  success.push(`‚úÖ GOOGLE_CLIENT_ID configurado`);
  console.log(`   Valor: ${process.env.GOOGLE_CLIENT_ID.substring(0, 20)}...`);
}

// 3. Verificar GOOGLE_CLIENT_SECRET
console.log('üìã 3. Verificando GOOGLE_CLIENT_SECRET...');
if (!process.env.GOOGLE_CLIENT_SECRET) {
  issues.push('‚ùå GOOGLE_CLIENT_SECRET n√£o configurado no .env');
} else if (process.env.GOOGLE_CLIENT_SECRET === 'your_google_client_secret_here') {
  issues.push('‚ùå GOOGLE_CLIENT_SECRET ainda est√° com valor padr√£o');
} else {
  success.push(`‚úÖ GOOGLE_CLIENT_SECRET configurado`);
  console.log(`   Valor: ${process.env.GOOGLE_CLIENT_SECRET.substring(0, 10)}...`);
}

// 4. Verificar GOOGLE_REDIRECT_URI
console.log('üìã 4. Verificando GOOGLE_REDIRECT_URI...');
const port = process.env.PORT || 3001;
const expectedRedirect = `http://localhost:${port}/auth/google/callback`;

if (!process.env.GOOGLE_REDIRECT_URI) {
  warnings.push(`‚ö†Ô∏è  GOOGLE_REDIRECT_URI n√£o configurado (usando padr√£o: ${expectedRedirect})`);
} else {
  success.push(`‚úÖ GOOGLE_REDIRECT_URI configurado: ${process.env.GOOGLE_REDIRECT_URI}`);
}

// 5. Verificar arquivo tokens.json
console.log('üìã 5. Verificando tokens.json...');
const tokenPath = path.join(__dirname, 'tokens.json');
if (!fs.existsSync(tokenPath)) {
  warnings.push('‚ö†Ô∏è  tokens.json n√£o encontrado (primeira autentica√ß√£o necess√°ria)');
} else {
  try {
    const tokens = fs.readJsonSync(tokenPath);
    const now = Date.now();
    const expiryDate = tokens.expiry_date;
    
    if (!expiryDate) {
      warnings.push('‚ö†Ô∏è  tokens.json existe mas n√£o tem data de expira√ß√£o');
    } else if (expiryDate <= now) {
      const expiredFor = Math.floor((now - expiryDate) / 1000 / 60 / 60);
      warnings.push(`‚ö†Ô∏è  Token expirado h√° ${expiredFor} horas`);
    } else {
      const expiresIn = Math.floor((expiryDate - now) / 1000 / 60);
      success.push(`‚úÖ Token v√°lido (expira em ${expiresIn} minutos)`);
    }
    
    if (!tokens.refresh_token) {
      warnings.push('‚ö†Ô∏è  tokens.json n√£o tem refresh_token (reautentica√ß√£o completa necess√°ria)');
    } else {
      success.push('‚úÖ Refresh token presente');
    }
  } catch (error) {
    issues.push(`‚ùå Erro ao ler tokens.json: ${error.message}`);
  }
}

// 6. Verificar porta do servidor
console.log('üìã 6. Verificando configura√ß√£o de porta...');
success.push(`‚úÖ Porta configurada: ${port}`);

// Resumo
console.log('\n‚ïê'.repeat(60));
console.log('\nüìä RESUMO DA VERIFICA√á√ÉO:\n');

if (success.length > 0) {
  console.log('‚úÖ SUCESSOS:\n');
  success.forEach(item => console.log(`   ${item}`));
  console.log('');
}

if (warnings.length > 0) {
  console.log('‚ö†Ô∏è  AVISOS:\n');
  warnings.forEach(item => console.log(`   ${item}`));
  console.log('');
}

if (issues.length > 0) {
  console.log('‚ùå PROBLEMAS ENCONTRADOS:\n');
  issues.forEach(item => console.log(`   ${item}`));
  console.log('');
}

// A√ß√µes recomendadas
console.log('‚ïê'.repeat(60));
console.log('\nüí° A√á√ïES RECOMENDADAS:\n');

if (issues.length > 0) {
  console.log('üî¥ A√á√ÉO URGENTE - Problemas cr√≠ticos encontrados:');
  console.log('');
  console.log('   1. Abra o Google Cloud Console:');
  console.log('      https://console.cloud.google.com/apis/credentials');
  console.log('');
  console.log('   2. Crie ou habilite um OAuth 2.0 Client ID');
  console.log('');
  console.log('   3. Configure as URIs de redirecionamento:');
  console.log(`      - ${expectedRedirect}`);
  console.log('      - http://localhost:3000/auth/google/callback');
  console.log('');
  console.log('   4. Copie Client ID e Client Secret');
  console.log('');
  console.log('   5. Atualize o arquivo .env:');
  console.log('      nano .env');
  console.log('');
  console.log('   6. Ap√≥s configurar, execute:');
  console.log('      node reautenticar-google.js');
  console.log('');
} else if (warnings.length > 0) {
  console.log('üü° A√á√ÉO NECESS√ÅRIA - Reautentica√ß√£o recomendada:');
  console.log('');
  console.log('   1. Certifique-se de que o servidor est√° rodando:');
  console.log('      npm start');
  console.log('');
  console.log('   2. Em outro terminal, execute:');
  console.log('      node reautenticar-google.js');
  console.log('');
  console.log('   3. Siga as instru√ß√µes no navegador');
  console.log('');
} else {
  console.log('üü¢ TUDO CERTO!');
  console.log('');
  console.log('   Sua configura√ß√£o parece estar correta.');
  console.log('   Se ainda tiver problemas de conex√£o, tente:');
  console.log('');
  console.log('   node reautenticar-google.js');
  console.log('');
}

console.log('‚ïê'.repeat(60));
console.log('');

// Exit code
process.exit(issues.length > 0 ? 1 : 0);

