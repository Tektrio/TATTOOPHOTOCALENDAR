#!/usr/bin/env node

/**
 * üßπ Script de Limpeza Total de Clientes
 * 
 * Remove TODOS os clientes e dados relacionados do banco de dados.
 * √ötil para resetar o sistema antes de fazer importa√ß√µes de teste.
 * 
 * O que remove:
 * - Todos os clientes
 * - Todos os agendamentos vinculados
 * - Todos os arquivos vinculados
 * - Todas as estat√≠sticas de clientes
 * 
 * Seguran√ßa:
 * - Cria backup autom√°tico antes de qualquer opera√ß√£o
 * - Modo dry-run dispon√≠vel para preview
 * - Log detalhado de todas as opera√ß√µes
 * 
 * Uso:
 *   node scripts/clear-all-clients.js              # Executa a limpeza
 *   node scripts/clear-all-clients.js --dry-run    # Apenas mostra o que seria removido
 */

const sqlite3 = require('sqlite3').verbose();
const fs = require('fs-extra');
const path = require('path');

// ============================================
// CONFIGURA√á√ïES
// ============================================

const DB_PATH = path.join(__dirname, '..', 'agenda_hibrida.db');
const BACKUP_DIR = path.join(__dirname, '..', 'backups');
const DRY_RUN = process.argv.includes('--dry-run');

// ============================================
// FUN√á√ïES DE BACKUP
// ============================================

async function createBackup() {
  console.log('üì¶ Criando backup do banco de dados...');
  
  // Criar diret√≥rio de backups se n√£o existir
  await fs.ensureDir(BACKUP_DIR);
  
  // Nome do backup com timestamp
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
  const backupPath = path.join(BACKUP_DIR, `before-clear-clients-${timestamp}.db`);
  
  // Copiar banco
  await fs.copy(DB_PATH, backupPath);
  
  console.log(`‚úÖ Backup criado: ${backupPath}`);
  return backupPath;
}

// ============================================
// FUN√á√ïES DE BANCO DE DADOS
// ============================================

function openDatabase() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(DB_PATH, (err) => {
      if (err) reject(err);
      else resolve(db);
    });
  });
}

function closeDatabase(db) {
  return new Promise((resolve, reject) => {
    db.close((err) => {
      if (err) reject(err);
      else resolve();
    });
  });
}

function runStatement(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function(err) {
      if (err) reject(err);
      else resolve({ changes: this.changes, lastID: this.lastID });
    });
  });
}

function getRow(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) reject(err);
      else resolve(row);
    });
  });
}

function getAllRows(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
}

// ============================================
// FUN√á√ïES DE AN√ÅLISE
// ============================================

async function analyzeData(db) {
  console.log('\nüìä Analisando dados...\n');
  
  // Contar clientes
  const clientsCount = await getRow(db, 'SELECT COUNT(*) as total FROM clients');
  console.log(`   üë• Clientes: ${clientsCount.total}`);
  
  // Contar agendamentos
  const appointmentsCount = await getRow(db, 
    'SELECT COUNT(*) as total FROM appointments WHERE client_id IS NOT NULL'
  );
  console.log(`   üìÖ Agendamentos vinculados: ${appointmentsCount.total}`);
  
  // Contar arquivos
  const filesCount = await getRow(db, 
    'SELECT COUNT(*) as total FROM files WHERE client_id IS NOT NULL'
  );
  console.log(`   üìÅ Arquivos vinculados: ${filesCount.total}`);
  
  // Contar estat√≠sticas
  const statsCount = await getRow(db, 
    'SELECT COUNT(*) as total FROM client_statistics'
  );
  console.log(`   üìà Estat√≠sticas de clientes: ${statsCount.total}`);
  
  return {
    clients: clientsCount.total,
    appointments: appointmentsCount.total,
    files: filesCount.total,
    statistics: statsCount.total
  };
}

// ============================================
// FUN√á√ïES DE LIMPEZA
// ============================================

async function clearAppointments(db, clientIds) {
  if (clientIds.length === 0) return 0;
  
  console.log(`\nüóëÔ∏è  Removendo agendamentos vinculados aos clientes...`);
  
  const placeholders = clientIds.map(() => '?').join(',');
  const sql = `DELETE FROM appointments WHERE client_id IN (${placeholders})`;
  
  if (DRY_RUN) {
    console.log('   [DRY-RUN] SQL:', sql.slice(0, 100) + '...');
    return 0;
  }
  
  const result = await runStatement(db, sql, clientIds);
  console.log(`‚úÖ ${result.changes} agendamentos removidos`);
  
  return result.changes;
}

async function clearFiles(db, clientIds) {
  if (clientIds.length === 0) return 0;
  
  console.log(`\nüóëÔ∏è  Removendo arquivos vinculados aos clientes...`);
  
  const placeholders = clientIds.map(() => '?').join(',');
  const sql = `DELETE FROM files WHERE client_id IN (${placeholders})`;
  
  if (DRY_RUN) {
    console.log('   [DRY-RUN] SQL:', sql.slice(0, 100) + '...');
    return 0;
  }
  
  const result = await runStatement(db, sql, clientIds);
  console.log(`‚úÖ ${result.changes} arquivos removidos`);
  
  return result.changes;
}

async function clearClientStatistics(db) {
  console.log(`\nüóëÔ∏è  Removendo estat√≠sticas de clientes...`);
  
  const sql = 'DELETE FROM client_statistics';
  
  if (DRY_RUN) {
    console.log('   [DRY-RUN] SQL:', sql);
    return 0;
  }
  
  const result = await runStatement(db, sql);
  console.log(`‚úÖ ${result.changes} registros de estat√≠sticas removidos`);
  
  return result.changes;
}

async function clearClients(db) {
  console.log(`\nüóëÔ∏è  Removendo todos os clientes...`);
  
  const sql = 'DELETE FROM clients';
  
  if (DRY_RUN) {
    console.log('   [DRY-RUN] SQL:', sql);
    return 0;
  }
  
  const result = await runStatement(db, sql);
  console.log(`‚úÖ ${result.changes} clientes removidos`);
  
  return result.changes;
}

async function optimizeDatabase(db) {
  console.log('\nüîß Otimizando banco de dados (VACUUM)...');
  
  if (DRY_RUN) {
    console.log('   [DRY-RUN] VACUUM');
    return;
  }
  
  await runStatement(db, 'VACUUM');
  console.log('‚úÖ Banco otimizado');
}

// ============================================
// FUN√á√ÉO PRINCIPAL
// ============================================

async function clearAllClients() {
  console.log('üßπ ============================================');
  console.log('üßπ LIMPEZA TOTAL DE CLIENTES');
  console.log('üßπ ============================================\n');
  
  if (DRY_RUN) {
    console.log('‚ö†Ô∏è  MODO DRY-RUN: Nenhuma altera√ß√£o ser√° feita\n');
  }
  
  try {
    // 1. Verificar se o banco existe
    if (!await fs.pathExists(DB_PATH)) {
      console.error(`‚ùå Banco de dados n√£o encontrado: ${DB_PATH}`);
      process.exit(1);
    }
    
    // 2. Abrir banco
    console.log('üîå Conectando ao banco de dados...');
    const db = await openDatabase();
    console.log('‚úÖ Conectado');
    
    // 3. Analisar dados
    const stats = await analyzeData(db);
    
    if (stats.clients === 0) {
      console.log('\n‚úÖ Nenhum cliente encontrado! Banco j√° est√° limpo.');
      await closeDatabase(db);
      process.exit(0);
    }
    
    // 4. Criar backup (apenas se n√£o for dry-run)
    let backupPath = null;
    if (!DRY_RUN) {
      backupPath = await createBackup();
    }
    
    console.log('');
    
    // 5. Confirmar
    if (!DRY_RUN) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover:');
      console.log(`   - ${stats.clients} clientes`);
      console.log(`   - ${stats.appointments} agendamentos`);
      console.log(`   - ${stats.files} arquivos`);
      console.log(`   - ${stats.statistics} registros de estat√≠sticas`);
      console.log('');
      console.log('‚ö†Ô∏è  Esta opera√ß√£o n√£o pode ser desfeita!');
      console.log(`   (Backup dispon√≠vel em: ${backupPath})\n`);
    }
    
    // 6. Buscar IDs dos clientes
    console.log('\nüìã Buscando IDs dos clientes...');
    const clientRows = await getAllRows(db, 'SELECT id FROM clients');
    const clientIds = clientRows.map(row => row.id);
    console.log(`‚úÖ ${clientIds.length} clientes encontrados`);
    
    // 7. Executar limpeza
    if (clientIds.length > 0) {
      console.log('\nüóëÔ∏è  Executando limpeza...');
      
      // Ordem importante: deletar relacionamentos primeiro
      await clearFiles(db, clientIds);
      await clearAppointments(db, clientIds);
      await clearClientStatistics(db);
      await clearClients(db);
      
      if (!DRY_RUN) {
        await optimizeDatabase(db);
      }
    }
    
    // 8. Fechar conex√£o
    await closeDatabase(db);
    console.log('\nüîå Conex√£o fechada');
    
    // 9. Resultado final
    console.log('\n‚úÖ ============================================');
    if (DRY_RUN) {
      console.log('‚úÖ DRY-RUN CONCLU√çDO - Nenhuma altera√ß√£o foi feita');
      console.log('‚úÖ Execute sem --dry-run para aplicar as mudan√ßas');
    } else {
      console.log('‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO!');
      console.log(`‚úÖ Backup dispon√≠vel em: ${backupPath}`);
      console.log('‚úÖ O banco est√° pronto para importa√ß√£o de novos dados');
    }
    console.log('‚úÖ ============================================\n');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå ERRO durante limpeza:', error);
    console.error(error.stack);
    process.exit(1);
  }
}

// ============================================
// EXECUTAR
// ============================================

// Verificar se o banco existe
if (!fs.existsSync(DB_PATH)) {
  console.error(`‚ùå Banco de dados n√£o encontrado: ${DB_PATH}`);
  console.error('   Execute este script a partir do diret√≥rio raiz do backend');
  process.exit(1);
}

// Executar limpeza
clearAllClients();

