#!/usr/bin/env node

/**
 * Script de Teste - Corre√ß√£o OAuth Google Drive
 * Verifica se todas as corre√ß√µes foram aplicadas corretamente
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üß™ TESTE AUTOM√ÅTICO: CORRE√á√ÉO OAUTH GOOGLE DRIVE');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

const tests = [];
const errors = [];
const warnings = [];

// ============================================
// TESTE 1: Verificar se Backend est√° Rodando
// ============================================
console.log('1Ô∏è‚É£  Testando Backend...');
try {
  const backendCheck = execSync('ps aux | grep "node.*server.js" | grep -v grep', { encoding: 'utf-8' });
  if (backendCheck) {
    tests.push({ name: 'Backend Rodando', status: '‚úÖ' });
    console.log('   ‚úÖ Backend est√° rodando\n');
  } else {
    throw new Error('Backend n√£o encontrado');
  }
} catch (error) {
  tests.push({ name: 'Backend Rodando', status: '‚ùå' });
  errors.push('Backend n√£o est√° rodando');
  console.log('   ‚ùå Backend N√ÉO est√° rodando\n');
}

// ============================================
// TESTE 2: Verificar Porta do Backend
// ============================================
console.log('2Ô∏è‚É£  Testando Porta 3001...');
try {
  execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3001', { encoding: 'utf-8', timeout: 5000 });
  tests.push({ name: 'Backend Acess√≠vel', status: '‚úÖ' });
  console.log('   ‚úÖ Backend respondendo em http://localhost:3001\n');
} catch (error) {
  tests.push({ name: 'Backend Acess√≠vel', status: '‚ùå' });
  errors.push('Backend n√£o est√° acess√≠vel na porta 3001');
  console.log('   ‚ùå Backend N√ÉO est√° acess√≠vel\n');
}

// ============================================
// TESTE 3: Verificar Frontend
// ============================================
console.log('3Ô∏è‚É£  Testando Frontend...');
try {
  const frontendCheck = execSync('ps aux | grep "vite" | grep -v grep', { encoding: 'utf-8' });
  if (frontendCheck) {
    tests.push({ name: 'Frontend Rodando', status: '‚úÖ' });
    console.log('   ‚úÖ Frontend est√° rodando\n');
  } else {
    throw new Error('Frontend n√£o encontrado');
  }
} catch (error) {
  tests.push({ name: 'Frontend Rodando', status: '‚ö†Ô∏è' });
  warnings.push('Frontend pode n√£o estar rodando');
  console.log('   ‚ö†Ô∏è  Frontend pode n√£o estar rodando\n');
}

// ============================================
// TESTE 4: Verificar Arquivo server.js Modificado
// ============================================
console.log('4Ô∏è‚É£  Verificando Corre√ß√µes no Backend...');
const serverPath = path.join(__dirname, 'agenda-hibrida-v2', 'server.js');
try {
  const serverContent = fs.readFileSync(serverPath, 'utf-8');
  
  // Verifica se cont√©m a detec√ß√£o de erro
  if (serverContent.includes('if (error)') && 
      serverContent.includes('access_denied') &&
      serverContent.includes('GOOGLE_OAUTH_SOLUCAO_COMPLETA.md')) {
    tests.push({ name: 'Backend Modificado', status: '‚úÖ' });
    console.log('   ‚úÖ Corre√ß√µes aplicadas no server.js');
    console.log('   ‚úÖ Detec√ß√£o de erro OAuth implementada');
    console.log('   ‚úÖ Mensagem personalizada configurada\n');
  } else {
    throw new Error('Corre√ß√µes n√£o encontradas');
  }
} catch (error) {
  tests.push({ name: 'Backend Modificado', status: '‚ùå' });
  errors.push('Corre√ß√µes n√£o encontradas no server.js');
  console.log('   ‚ùå Corre√ß√µes N√ÉO encontradas no server.js\n');
}

// ============================================
// TESTE 5: Verificar Arquivo Modal Modificado
// ============================================
console.log('5Ô∏è‚É£  Verificando Corre√ß√µes no Frontend...');
const modalPath = path.join(__dirname, 'agenda-hibrida-frontend', 'src', 'components', 'AddGoogleAccountModal.jsx');
try {
  const modalContent = fs.readFileSync(modalPath, 'utf-8');
  
  if (modalContent.includes('event.data.error') && 
      modalContent.includes('403') &&
      modalContent.includes('access_denied')) {
    tests.push({ name: 'Frontend Modificado', status: '‚úÖ' });
    console.log('   ‚úÖ Corre√ß√µes aplicadas no AddGoogleAccountModal.jsx');
    console.log('   ‚úÖ Tratamento de erro 403 implementado');
    console.log('   ‚úÖ Alerta informativo configurado\n');
  } else {
    throw new Error('Corre√ß√µes n√£o encontradas');
  }
} catch (error) {
  tests.push({ name: 'Frontend Modificado', status: '‚ùå' });
  errors.push('Corre√ß√µes n√£o encontradas no AddGoogleAccountModal.jsx');
  console.log('   ‚ùå Corre√ß√µes N√ÉO encontradas no modal\n');
}

// ============================================
// TESTE 6: Verificar Documenta√ß√£o
// ============================================
console.log('6Ô∏è‚É£  Verificando Documenta√ß√£o...');
const docs = [
  'GOOGLE_OAUTH_SOLUCAO_COMPLETA.md',
  'CORRECAO_ERRO_GOOGLE_OAUTH.md',
  'üéØ_SOLUCAO_ERRO_GOOGLE.txt'
];

let allDocsExist = true;
docs.forEach(doc => {
  const docPath = path.join(__dirname, doc);
  if (fs.existsSync(docPath)) {
    const stats = fs.statSync(docPath);
    console.log(`   ‚úÖ ${doc} (${(stats.size / 1024).toFixed(1)}KB)`);
  } else {
    console.log(`   ‚ùå ${doc} N√ÉO encontrado`);
    allDocsExist = false;
    errors.push(`Documenta√ß√£o ${doc} n√£o encontrada`);
  }
});

if (allDocsExist) {
  tests.push({ name: 'Documenta√ß√£o Completa', status: '‚úÖ' });
  console.log('');
} else {
  tests.push({ name: 'Documenta√ß√£o Completa', status: '‚ùå' });
}

// ============================================
// TESTE 7: Verificar Configura√ß√£o .env
// ============================================
console.log('7Ô∏è‚É£  Verificando Configura√ß√£o Google OAuth...');
const envPath = path.join(__dirname, 'agenda-hibrida-v2', '.env');
try {
  const envContent = fs.readFileSync(envPath, 'utf-8');
  
  let hasClientId = false;
  let hasClientSecret = false;
  let hasRedirectUri = false;
  
  if (envContent.includes('GOOGLE_CLIENT_ID=') && !envContent.includes('GOOGLE_CLIENT_ID=your_')) {
    hasClientId = true;
    console.log('   ‚úÖ GOOGLE_CLIENT_ID configurado');
  } else {
    console.log('   ‚ùå GOOGLE_CLIENT_ID n√£o configurado');
  }
  
  if (envContent.includes('GOOGLE_CLIENT_SECRET=') && !envContent.includes('GOOGLE_CLIENT_SECRET=your_')) {
    hasClientSecret = true;
    console.log('   ‚úÖ GOOGLE_CLIENT_SECRET configurado');
  } else {
    console.log('   ‚ùå GOOGLE_CLIENT_SECRET n√£o configurado');
  }
  
  if (envContent.includes('GOOGLE_REDIRECT_URI=http://localhost:3001/auth/google/callback')) {
    hasRedirectUri = true;
    console.log('   ‚úÖ GOOGLE_REDIRECT_URI configurado');
  } else {
    console.log('   ‚ö†Ô∏è  GOOGLE_REDIRECT_URI pode estar incorreto');
  }
  
  if (hasClientId && hasClientSecret && hasRedirectUri) {
    tests.push({ name: 'Configura√ß√£o OAuth', status: '‚úÖ' });
  } else {
    tests.push({ name: 'Configura√ß√£o OAuth', status: '‚ö†Ô∏è' });
    warnings.push('Configura√ß√£o OAuth incompleta ou incorreta');
  }
  console.log('');
} catch (error) {
  tests.push({ name: 'Configura√ß√£o OAuth', status: '‚ùå' });
  errors.push('.env n√£o encontrado ou inacess√≠vel');
  console.log('   ‚ùå Arquivo .env n√£o encontrado\n');
}

// ============================================
// TESTE 8: Verificar Rota OAuth Callback
// ============================================
console.log('8Ô∏è‚É£  Testando Rota OAuth Callback...');
try {
  const response = execSync('curl -s -w "\\n%{http_code}" "http://localhost:3001/auth/google/callback?error=access_denied"', { 
    encoding: 'utf-8',
    timeout: 5000 
  });
  
  if (response.includes('403') || response.includes('access_denied') || response.includes('200')) {
    tests.push({ name: 'Rota OAuth Callback', status: '‚úÖ' });
    console.log('   ‚úÖ Rota /auth/google/callback est√° respondendo');
    console.log('   ‚úÖ Tratamento de erro est√° funcional\n');
  } else {
    throw new Error('Rota n√£o est√° respondendo corretamente');
  }
} catch (error) {
  tests.push({ name: 'Rota OAuth Callback', status: '‚ö†Ô∏è' });
  warnings.push('Rota OAuth pode n√£o estar funcionando como esperado');
  console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel testar a rota completamente\n');
}

// ============================================
// RESUMO FINAL
// ============================================
console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìä RESUMO DOS TESTES');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

tests.forEach(test => {
  console.log(`${test.status} ${test.name}`);
});

console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

const totalTests = tests.length;
const passedTests = tests.filter(t => t.status === '‚úÖ').length;
const failedTests = tests.filter(t => t.status === '‚ùå').length;
const warningTests = tests.filter(t => t.status === '‚ö†Ô∏è').length;

console.log(`\nüìà Estat√≠sticas:`);
console.log(`   Total:     ${totalTests} testes`);
console.log(`   Passou:    ${passedTests} ‚úÖ`);
console.log(`   Falhou:    ${failedTests} ‚ùå`);
console.log(`   Avisos:    ${warningTests} ‚ö†Ô∏è`);

if (errors.length > 0) {
  console.log('\n‚ùå ERROS ENCONTRADOS:');
  errors.forEach((error, i) => {
    console.log(`   ${i + 1}. ${error}`);
  });
}

if (warnings.length > 0) {
  console.log('\n‚ö†Ô∏è  AVISOS:');
  warnings.forEach((warning, i) => {
    console.log(`   ${i + 1}. ${warning}`);
  });
}

console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

if (failedTests === 0 && warningTests <= 1) {
  console.log('‚úÖ TESTES CONCLU√çDOS COM SUCESSO!');
  console.log('   A corre√ß√£o OAuth est√° funcionando corretamente.');
  process.exit(0);
} else if (failedTests > 0) {
  console.log('‚ùå ALGUNS TESTES FALHARAM!');
  console.log('   Revise os erros acima.');
  process.exit(1);
} else {
  console.log('‚ö†Ô∏è  TESTES CONCLU√çDOS COM AVISOS');
  console.log('   A maioria das funcionalidades est√° OK.');
  process.exit(0);
}

