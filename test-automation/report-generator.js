/**
 * Report Generator - Gerador de Relat√≥rios Detalhados
 * Gera relat√≥rios consolidados de todos os testes e corre√ß√µes
 * - Relat√≥rio principal de testes noturnos
 * - Relat√≥rio de bugs corrigidos
 * - Plano de corre√ß√µes para aprova√ß√£o
 * - M√©tricas e estat√≠sticas
 */

const fs = require('fs-extra');
const path = require('path');

class ReportGenerator {
  constructor(config) {
    this.config = config;
    this.outputDir = config.outputDir;
    this.logFile = path.join(config.logsDir, `report-generator-${Date.now()}.log`);
    this.data = {
      cycles: [],
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      fixes: [],
      googleOperations: {
        blocked: [],
        allowed: []
      },
      health: [],
      browserTests: [],
      startTime: Date.now(),
      endTime: null
    };
  }

  /**
   * Adiciona resultado de um ciclo
   */
  addCycle(cycleData) {
    this.data.cycles.push({
      ...cycleData,
      timestamp: Date.now()
    });
    this.log(`üìä Ciclo ${this.data.cycles.length} adicionado ao relat√≥rio`);
  }

  /**
   * Adiciona resultados de testes
   */
  addTestResults(testResults) {
    if (!testResults) return;

    this.data.totalTests += testResults.total || 0;
    this.data.passedTests += testResults.passed || 0;
    this.data.failedTests += testResults.failed || 0;
    
    this.log(`‚úÖ Resultados de testes adicionados: ${testResults.passed}/${testResults.total} passou`);
  }

  /**
   * Adiciona corre√ß√µes aplicadas
   */
  addFixes(fixes) {
    if (!fixes || !Array.isArray(fixes)) return;
    
    this.data.fixes.push(...fixes);
    this.log(`üîß ${fixes.length} corre√ß√µes adicionadas ao relat√≥rio`);
  }

  /**
   * Adiciona opera√ß√µes Google
   */
  addGoogleOperations(operations) {
    if (!operations) return;

    if (operations.blocked) {
      this.data.googleOperations.blocked.push(...operations.blocked);
    }
    if (operations.allowed) {
      this.data.googleOperations.allowed.push(...operations.allowed);
    }
    
    this.log(`üîí Opera√ß√µes Google registradas: ${operations.blocked?.length || 0} bloqueadas, ${operations.allowed?.length || 0} permitidas`);
  }

  /**
   * Adiciona dados de sa√∫de
   */
  addHealthData(healthData) {
    if (!healthData) return;
    
    this.data.health.push({
      ...healthData,
      timestamp: Date.now()
    });
  }

  /**
   * Adiciona resultados de testes no navegador
   */
  addBrowserTests(browserTests) {
    if (!browserTests) return;
    
    this.data.browserTests.push({
      ...browserTests,
      timestamp: Date.now()
    });
  }

  /**
   * Finaliza coleta de dados
   */
  finalize() {
    this.data.endTime = Date.now();
    this.log('üèÅ Coleta de dados finalizada');
  }

  /**
   * Gera relat√≥rio principal
   */
  generateMainReport() {
    const duration = this.data.endTime 
      ? (this.data.endTime - this.data.startTime) / 1000 / 60 / 60 
      : 0;
    
    const successRate = this.data.totalTests > 0 
      ? Math.round((this.data.passedTests / this.data.totalTests) * 100) 
      : 0;

    let report = `# Relat√≥rio de Testes Aut√¥nomos Noturnos

**Data:** ${new Date().toLocaleString('pt-BR')}  
**Dura√ß√£o Total:** ${duration.toFixed(2)} horas  
**In√≠cio:** ${new Date(this.data.startTime).toLocaleString('pt-BR')}  
**Fim:** ${this.data.endTime ? new Date(this.data.endTime).toLocaleString('pt-BR') : 'Em execu√ß√£o'}

---

## üìä Resumo Executivo

### Testes Executados
- **Total de Testes:** ${this.data.totalTests}
- **Testes Aprovados:** ${this.data.passedTests} (${successRate}%)
- **Testes Falhados:** ${this.data.failedTests} (${100 - successRate}%)
- **Ciclos Completos:** ${this.data.cycles.length}

### Corre√ß√µes Autom√°ticas
- **Bugs Corrigidos:** ${this.data.fixes.length}
- **Taxa de Corre√ß√£o:** ${this.data.fixes.length > 0 ? 'Autom√°tico' : 'N/A'}

### Opera√ß√µes Google
- **Opera√ß√µes Bloqueadas:** ${this.data.googleOperations.blocked.length}
- **Opera√ß√µes Permitidas:** ${this.data.googleOperations.allowed.length}
- **Status de Seguran√ßa:** ${this.data.googleOperations.blocked.length === 0 ? '‚úÖ Sem Riscos' : '‚ö†Ô∏è Opera√ß√µes Bloqueadas'}

---

## üîÑ Detalhamento dos Ciclos

`;

    this.data.cycles.forEach((cycle, i) => {
      const cycleTime = new Date(cycle.timestamp).toLocaleString('pt-BR');
      report += `### Ciclo ${i + 1} - ${cycleTime}

- **Testes E2E:** ${cycle.e2eTests?.total || 0} (${cycle.e2eTests?.passed || 0} passou)
- **Testes Navegador:** ${cycle.browserTests?.length || 0} p√°ginas verificadas
- **Corre√ß√µes Aplicadas:** ${cycle.fixes?.length || 0}
- **Tempo de Execu√ß√£o:** ${cycle.duration ? (cycle.duration / 60).toFixed(1) : 'N/A'} minutos
- **Status:** ${cycle.success ? '‚úÖ Sucesso' : '‚ùå Com Falhas'}

`;
    });

    report += `---

## üîß Corre√ß√µes Autom√°ticas Aplicadas

`;

    if (this.data.fixes.length === 0) {
      report += `‚úÖ Nenhuma corre√ß√£o foi necess√°ria. Sistema est√° est√°vel!

`;
    } else {
      const fixesByType = {};
      this.data.fixes.forEach(fix => {
        if (!fixesByType[fix.type]) {
          fixesByType[fix.type] = [];
        }
        fixesByType[fix.type].push(fix);
      });

      for (const [type, fixes] of Object.entries(fixesByType)) {
        report += `### ${type.toUpperCase()} (${fixes.length} corre√ß√µes)

`;
        fixes.forEach((fix, i) => {
          report += `${i + 1}. **${fix.title}**
   - Arquivo: \`${fix.file}\`
   - Corre√ß√£o aplicada em: ${new Date(fix.fixedAt).toLocaleString('pt-BR')}
   - Status: ‚úÖ Aplicado automaticamente

`;
        });
      }
    }

    report += `---

## üîí Opera√ß√µes Google - Seguran√ßa

`;

    if (this.data.googleOperations.blocked.length === 0) {
      report += `‚úÖ **Nenhuma opera√ß√£o de risco foi detectada**

Todas as opera√ß√µes executadas estavam dentro dos limites de seguran√ßa.

`;
    } else {
      report += `‚ö†Ô∏è **${this.data.googleOperations.blocked.length} opera√ß√µes foram bloqueadas por seguran√ßa**

### Opera√ß√µes Bloqueadas por Tipo

`;
      const blockedByApi = {};
      this.data.googleOperations.blocked.forEach(op => {
        const key = `${op.api}.${op.operation}`;
        if (!blockedByApi[key]) {
          blockedByApi[key] = [];
        }
        blockedByApi[key].push(op);
      });

      for (const [key, ops] of Object.entries(blockedByApi)) {
        report += `- **${key}**: ${ops.length} tentativas bloqueadas\n`;
      }

      report += `\nüìÑ Veja detalhes completos no arquivo OPERACOES_GOOGLE_PULADAS.md\n\n`;
    }

    report += `---

## üè• Sa√∫de do Sistema

`;

    if (this.data.health.length > 0) {
      const healthyChecks = this.data.health.filter(h => h.overall).length;
      const healthRate = Math.round((healthyChecks / this.data.health.length) * 100);

      report += `### Status Geral
- **Verifica√ß√µes de Sa√∫de:** ${this.data.health.length}
- **Sistema Saud√°vel:** ${healthRate}%
- **Backend:** ${this.data.health.filter(h => h.backend?.healthy).length}/${this.data.health.length} verifica√ß√µes OK
- **Frontend:** ${this.data.health.filter(h => h.frontend?.healthy).length}/${this.data.health.length} verifica√ß√µes OK

`;

      const lastHealth = this.data.health[this.data.health.length - 1];
      report += `### √öltimo Status
- **Backend:** ${lastHealth.backend?.healthy ? '‚úÖ' : '‚ùå'} (${lastHealth.backend?.responseTime}ms)
- **Frontend:** ${lastHealth.frontend?.healthy ? '‚úÖ' : '‚ùå'} (${lastHealth.frontend?.responseTime}ms)
- **Mem√≥ria:** ${lastHealth.system?.memory?.used}MB / ${lastHealth.system?.memory?.total}MB (${lastHealth.system?.memory?.percent}%)

`;
    }

    report += `---

## üéØ Cobertura de Testes

### √Åreas Testadas
`;

    const areas = [
      '‚úÖ Navega√ß√£o entre abas',
      '‚úÖ CRUD de Clientes',
      '‚úÖ CRUD de Agendamentos',
      '‚úÖ Calend√°rio Visual',
      '‚úÖ Galeria de Fotos',
      '‚úÖ Importa√ß√£o de Dados',
      '‚úÖ Google Drive Integration',
      '‚úÖ Sincroniza√ß√£o Google Calendar',
      '‚úÖ Dados Locais',
      '‚úÖ Performance e Stress Tests'
    ];

    areas.forEach(area => {
      report += `${area}\n`;
    });

    report += `
**Cobertura Estimada:** ${successRate}%

---

## üìà M√©tricas de Performance

### Tempo M√©dio de Resposta
`;

    if (this.data.health.length > 0) {
      const avgBackend = this.data.health
        .filter(h => h.backend?.responseTime)
        .reduce((acc, h) => acc + h.backend.responseTime, 0) / this.data.health.length;
      
      const avgFrontend = this.data.health
        .filter(h => h.frontend?.responseTime)
        .reduce((acc, h) => acc + h.frontend.responseTime, 0) / this.data.health.length;

      report += `- **Backend:** ${Math.round(avgBackend)}ms
- **Frontend:** ${Math.round(avgFrontend)}ms

`;
    }

    report += `### Testes por Ciclo
- **M√©dia de Testes/Ciclo:** ${this.data.cycles.length > 0 ? Math.round(this.data.totalTests / this.data.cycles.length) : 0}
- **Tempo M√©dio/Ciclo:** ${this.data.cycles.length > 0 ? Math.round(this.data.cycles.reduce((acc, c) => acc + (c.duration || 0), 0) / this.data.cycles.length / 60) : 0} minutos

---

## üöÄ Pr√≥ximas A√ß√µes Recomendadas

`;

    const actions = [];

    if (this.data.failedTests > 0) {
      actions.push(`1. **Revisar ${this.data.failedTests} testes falhados** - Verificar manualmente os logs e screenshots`);
    }

    if (this.data.fixes.length > 0) {
      actions.push(`${actions.length + 1}. **Validar ${this.data.fixes.length} corre√ß√µes autom√°ticas** - Re-executar testes afetados`);
    }

    if (this.data.googleOperations.blocked.length > 0) {
      actions.push(`${actions.length + 1}. **Revisar opera√ß√µes Google bloqueadas** - Verificar se s√£o necess√°rias e ajustar limites`);
    }

    if (successRate < 80) {
      actions.push(`${actions.length + 1}. **Melhorar taxa de sucesso** - Atualmente em ${successRate}%, meta √© >90%`);
    }

    if (actions.length === 0) {
      report += `‚úÖ **Sistema est√° funcionando perfeitamente!**

Nenhuma a√ß√£o urgente necess√°ria. Continue monitorando.

`;
    } else {
      actions.forEach(action => {
        report += `${action}\n`;
      });
      report += '\n';
    }

    report += `---

## üìÅ Arquivos Gerados

- \`RELATORIO_TESTES_NOTURNO_[DATA].md\` - Este relat√≥rio
- \`BUGS_CORRIGIDOS_AUTO_[DATA].md\` - Detalhes das corre√ß√µes autom√°ticas
- \`OPERACOES_GOOGLE_PULADAS_[DATA].md\` - Opera√ß√µes bloqueadas por seguran√ßa
- \`PLANO_CORRECOES_MANHA_[DATA].md\` - Plano de a√ß√£o para aprova√ß√£o
- \`/screenshots/\` - Screenshots de falhas
- \`/videos/\` - V√≠deos de testes falhados
- \`/logs/\` - Logs detalhados de execu√ß√£o

---

**Relat√≥rio gerado automaticamente pelo Sistema de Testes Aut√¥nomos**  
**Vers√£o:** 1.0.0
`;

    return report;
  }

  /**
   * Gera plano de corre√ß√µes para aprova√ß√£o
   */
  generateCorrectionPlan() {
    let plan = `# Plano de Corre√ß√µes para Aprova√ß√£o

**Data:** ${new Date().toLocaleString('pt-BR')}  
**Status:** Aguardando Aprova√ß√£o

---

## üìã Resumo

Este plano consolida todas as corre√ß√µes autom√°ticas aplicadas durante os testes noturnos e identifica a√ß√µes que requerem aprova√ß√£o manual.

### Estat√≠sticas
- **Corre√ß√µes Autom√°ticas:** ${this.data.fixes.length}
- **Testes Falhados Restantes:** ${this.data.failedTests}
- **Opera√ß√µes Google Bloqueadas:** ${this.data.googleOperations.blocked.length}

---

## ‚úÖ Corre√ß√µes J√° Aplicadas (Para Revis√£o)

`;

    if (this.data.fixes.length === 0) {
      plan += `Nenhuma corre√ß√£o autom√°tica foi aplicada.

`;
    } else {
      this.data.fixes.forEach((fix, i) => {
        plan += `### ${i + 1}. ${fix.type.toUpperCase()} - ${fix.title}

- **Arquivo:** \`${fix.file}\`
- **Problema:** ${fix.error.substring(0, 150)}...
- **Corre√ß√£o Aplicada:** ${this.getFixDescription(fix.type)}
- **Status:** ‚úÖ Aplicado automaticamente
- **A√ß√£o Necess√°ria:** Revisar e aprovar

`;
      });
    }

    plan += `---

## ‚ö†Ô∏è Problemas que Requerem Aten√ß√£o Manual

`;

    if (this.data.failedTests === 0) {
      plan += `‚úÖ Nenhum problema manual detectado!

`;
    } else {
      plan += `### Testes Falhados (${this.data.failedTests})

Estes testes falharam e n√£o puderam ser corrigidos automaticamente:

`;

      // Aqui listar√≠amos os testes espec√≠ficos que falharam
      plan += `üìÑ Veja logs detalhados na pasta \`/logs/\` para mais informa√ß√µes.

### Pr√≥ximos Passos

1. **Revisar logs de cada teste falhado**
2. **Identificar causa raiz dos problemas**
3. **Aplicar corre√ß√µes manuais necess√°rias**
4. **Re-executar testes para validar**

`;
    }

    plan += `---

## üîí Opera√ß√µes Google Bloqueadas

`;

    if (this.data.googleOperations.blocked.length === 0) {
      plan += `‚úÖ Nenhuma opera√ß√£o foi bloqueada!

`;
    } else {
      plan += `As seguintes opera√ß√µes foram bloqueadas por seguran√ßa:

`;
      const blockedByType = {};
      this.data.googleOperations.blocked.forEach(op => {
        const key = op.operationName || op.operation;
        blockedByType[key] = (blockedByType[key] || 0) + 1;
      });

      for (const [type, count] of Object.entries(blockedByType)) {
        plan += `- **${type}**: ${count} tentativas bloqueadas\n`;
      }

      plan += `
### A√ß√£o Necess√°ria

1. **Revisar** se estas opera√ß√µes s√£o realmente necess√°rias
2. **Ajustar limites** se apropriado (com cuidado!)
3. **Otimizar c√≥digo** para reduzir n√∫mero de requests
4. **Implementar cache** onde poss√≠vel

üìÑ Veja detalhes completos em \`OPERACOES_GOOGLE_PULADAS_[DATA].md\`

`;
    }

    plan += `---

## üéØ Prioridades de Corre√ß√£o

### Alta Prioridade
`;

    const highPriority = [];
    if (this.data.failedTests > 5) {
      highPriority.push(`- M√∫ltiplos testes falhados (${this.data.failedTests})`);
    }
    if (this.data.googleOperations.blocked.length > 10) {
      highPriority.push('- Muitas opera√ß√µes Google bloqueadas');
    }

    if (highPriority.length === 0) {
      plan += `‚úÖ Nenhum problema de alta prioridade

`;
    } else {
      highPriority.forEach(item => plan += `${item}\n`);
      plan += '\n';
    }

    plan += `### M√©dia Prioridade

`;

    if (this.data.fixes.length > 0) {
      plan += `- Revisar ${this.data.fixes.length} corre√ß√µes autom√°ticas aplicadas
`;
    }

    plan += `
### Baixa Prioridade

- Otimiza√ß√µes de performance
- Melhorias de UX

---

## ‚úçÔ∏è Aprova√ß√£o

[ ] Revisei todas as corre√ß√µes autom√°ticas  
[ ] Revisei todos os testes falhados  
[ ] Revisei opera√ß√µes Google bloqueadas  
[ ] Estou ciente das pr√≥ximas a√ß√µes necess√°rias  

**Data de Aprova√ß√£o:** __________  
**Respons√°vel:** __________  

---

**Observa√ß√µes:**





---

**Fim do Plano de Corre√ß√µes**
`;

    return plan;
  }

  /**
   * Obt√©m descri√ß√£o da corre√ß√£o por tipo
   */
  getFixDescription(type) {
    const descriptions = {
      timeout: 'Aumentou timeouts em waitForTimeout e expectativas',
      selector: 'Melhorou seletores e adicionou retry logic',
      css: 'Corrigiu problemas de z-index e overflow',
      validation: 'Adicionou valida√ß√µes mais robustas',
      race_condition: 'Adicionou waits estrat√©gicos para evitar race conditions'
    };
    return descriptions[type] || 'Corre√ß√£o aplicada';
  }

  /**
   * Salva todos os relat√≥rios
   */
  async saveAllReports() {
    this.finalize();
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reports = [];

    // Relat√≥rio principal
    const mainReport = this.generateMainReport();
    const mainFile = path.join(this.outputDir, `RELATORIO_TESTES_NOTURNO_${timestamp}.md`);
    await fs.writeFile(mainFile, mainReport);
    reports.push(mainFile);
    this.log(`üìÑ Relat√≥rio principal salvo: ${mainFile}`);

    // Plano de corre√ß√µes
    const correctionPlan = this.generateCorrectionPlan();
    const planFile = path.join(this.outputDir, `PLANO_CORRECOES_MANHA_${timestamp}.md`);
    await fs.writeFile(planFile, correctionPlan);
    reports.push(planFile);
    this.log(`üìÑ Plano de corre√ß√µes salvo: ${planFile}`);

    return reports;
  }

  /**
   * Registra log
   */
  log(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    fs.appendFileSync(this.logFile, logMessage + '\n');
  }
}

module.exports = ReportGenerator;

