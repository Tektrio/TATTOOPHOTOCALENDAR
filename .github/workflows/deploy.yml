name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.4.1
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      - name: Install backend dependencies
        run: |
          cd agenda-hibrida-v2
          npm ci --production
      
      - name: Install frontend dependencies
        run: |
          cd agenda-hibrida-frontend
          pnpm install --frozen-lockfile --prod
      
      - name: Build frontend
        run: |
          cd agenda-hibrida-frontend
          pnpm run build
        env:
          NODE_ENV: production
      
      - name: Run tests
        run: |
          cd agenda-hibrida-v2
          npm run test:unit
          npm run test:integration
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r agenda-hibrida-v2 deploy/
          cp -r agenda-hibrida-frontend/dist deploy/frontend
          tar -czf deployment-package.tar.gz deploy/
      
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.seudominio.com
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          echo "This step would typically use SSH or a deployment service"
          # Example with SSH:
          # ssh user@staging-server "cd /var/www && tar -xzf -" < deployment-package.tar.gz
          # ssh user@staging-server "cd /var/www/deploy && pm2 restart tattoo-backend"
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # curl -f https://staging.seudominio.com/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://seudominio.com
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: Create backup
        run: |
          echo "Creating backup before deployment..."
          # This would typically create a backup of the current production database
      
      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          echo "This step would typically use SSH or a deployment service"
          # Example with SSH:
          # ssh user@production-server "cd /var/www && tar -xzf -" < deployment-package.tar.gz
          # ssh user@production-server "cd /var/www/deploy && pm2 restart tattoo-backend"
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production..."
          # curl -f https://seudominio.com/health || exit 1
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to production successful!"
          echo "Version: ${{ github.ref_name }}"
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Rolling back..."
          # ssh user@production-server "cd /var/www && bash scripts/rollback.sh"

  # Post-deployment health check
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Check application health
        run: |
          echo "Checking application health..."
          # This would run comprehensive health checks
          # curl -f https://seudominio.com/health
          # curl -f https://seudominio.com/api/status
      
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests..."
          # This could run a subset of E2E tests against the deployed environment

