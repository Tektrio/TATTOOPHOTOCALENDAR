#!/bin/bash

# Script de Sincroniza√ß√£o CI/CD para GitHub
# Data: 31 de Outubro de 2025
# Reposit√≥rio: Tektrio/TATTOOPHOTOCALENDAR

set -e  # Parar em caso de erro

echo "üöÄ Sincroniza√ß√£o CI/CD - GitHub"
echo "================================"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -d ".git" ]; then
    echo "‚ùå ERRO: Execute este script na raiz do reposit√≥rio (onde est√° a pasta .git)"
    exit 1
fi

echo "üìÇ Diret√≥rio: $(pwd)"
echo ""

# 1. Remover workflows antigos
echo "üóëÔ∏è  Removendo workflows antigos..."
if [ -f ".github/workflows/deploy.yml" ]; then
    git rm .github/workflows/deploy.yml 2>/dev/null || echo "   ‚ö†Ô∏è  deploy.yml j√° foi removido"
fi

if [ -f ".github/workflows/test.yml" ]; then
    git rm .github/workflows/test.yml 2>/dev/null || echo "   ‚ö†Ô∏è  test.yml j√° foi removido"
fi
echo "   ‚úÖ Workflows antigos removidos"
echo ""

# 2. Adicionar novos workflows
echo "üì¶ Adicionando workflows CI/CD..."
git add .github/workflows/ci.yml 2>/dev/null || echo "   ‚ö†Ô∏è  ci.yml n√£o encontrado"
git add .github/workflows/security.yml 2>/dev/null || echo "   ‚ö†Ô∏è  security.yml n√£o encontrado"
git add .github/workflows/code-quality.yml 2>/dev/null || echo "   ‚ö†Ô∏è  code-quality.yml n√£o encontrado"
git add .github/workflows/auto-label.yml 2>/dev/null || echo "   ‚ö†Ô∏è  auto-label.yml n√£o encontrado"
echo "   ‚úÖ Workflows adicionados"
echo ""

# 3. Adicionar templates (se existirem)
echo "üìã Adicionando templates..."
git add .github/PULL_REQUEST_TEMPLATE.md 2>/dev/null || echo "   ‚ö†Ô∏è  PULL_REQUEST_TEMPLATE.md n√£o encontrado"
git add .github/ISSUE_TEMPLATE/*.yml 2>/dev/null || echo "   ‚ö†Ô∏è  Templates de issues n√£o encontrados"
git add .github/ISSUE_TEMPLATE/config.yml 2>/dev/null || echo "   ‚ö†Ô∏è  config.yml n√£o encontrado"
echo "   ‚úÖ Templates adicionados"
echo ""

# 4. Adicionar configura√ß√µes
echo "‚öôÔ∏è  Adicionando configura√ß√µes..."
git add .github/CONTRIBUTING.md 2>/dev/null || echo "   ‚ö†Ô∏è  CONTRIBUTING.md n√£o encontrado"
git add .github/dependabot.yml 2>/dev/null || echo "   ‚ö†Ô∏è  dependabot.yml n√£o encontrado"
git add .github/labeler.yml 2>/dev/null || echo "   ‚ö†Ô∏è  labeler.yml n√£o encontrado"
git add .gitleaksignore 2>/dev/null || echo "   ‚ö†Ô∏è  .gitleaksignore j√° existe"
git add agenda-hibrida-v2/.npmrc 2>/dev/null || echo "   ‚ö†Ô∏è  backend/.npmrc n√£o encontrado"
git add agenda-hibrida-frontend/.npmrc 2>/dev/null || echo "   ‚ö†Ô∏è  frontend/.npmrc n√£o encontrado"
echo "   ‚úÖ Configura√ß√µes adicionadas"
echo ""

# 5. Adicionar scripts
echo "üîß Adicionando scripts de valida√ß√£o..."
git add scripts/pre-commit.sh 2>/dev/null || echo "   ‚ö†Ô∏è  pre-commit.sh n√£o encontrado"
git add scripts/pre-push.sh 2>/dev/null || echo "   ‚ö†Ô∏è  pre-push.sh n√£o encontrado"
git add scripts/setup-git-hooks.sh 2>/dev/null || echo "   ‚ö†Ô∏è  setup-git-hooks.sh n√£o encontrado"
git add scripts/validate-local.sh 2>/dev/null || echo "   ‚ö†Ô∏è  validate-local.sh n√£o encontrado"
echo "   ‚úÖ Scripts adicionados"
echo ""

# 6. Adicionar documenta√ß√£o
echo "üìö Adicionando documenta√ß√£o..."
git add docs/BRANCH_PROTECTION_SETUP.md 2>/dev/null || echo "   ‚ö†Ô∏è  BRANCH_PROTECTION_SETUP.md n√£o encontrado"
git add docs/LOCAL_WORKFLOW_TESTING.md 2>/dev/null || echo "   ‚ö†Ô∏è  LOCAL_WORKFLOW_TESTING.md n√£o encontrado"
git add docs/CI_CD_DOCUMENTATION.md 2>/dev/null || echo "   ‚ö†Ô∏è  CI_CD_DOCUMENTATION.md n√£o encontrado"
git add VERIFICACAO_CI_CD.md 2>/dev/null || echo "   ‚ö†Ô∏è  VERIFICACAO_CI_CD.md n√£o encontrado"
git add CI_CD_STATUS_FINAL.md 2>/dev/null || echo "   ‚ö†Ô∏è  CI_CD_STATUS_FINAL.md n√£o encontrado"
git add RELATORIO_VERIFICACAO_GITHUB.md 2>/dev/null || echo "   ‚ö†Ô∏è  RELATORIO_VERIFICACAO_GITHUB.md n√£o encontrado"
git add README.md 2>/dev/null || echo "   ‚ö†Ô∏è  README.md n√£o modificado"
echo "   ‚úÖ Documenta√ß√£o adicionada"
echo ""

# 7. Verificar mudan√ßas
echo "üìù Verificando mudan√ßas preparadas..."
git status --short
echo ""

# 8. Confirma√ß√£o
echo "‚ö†Ô∏è  CONFIRMA√á√ÉO NECESS√ÅRIA"
echo "=========================="
echo ""
echo "Arquivos preparados para commit. Revisar acima."
echo ""
read -p "Deseja continuar com o commit e push? (s/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[SsYy]$ ]]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio"
    echo ""
    echo "üí° Para reverter as mudan√ßas preparadas, execute:"
    echo "   git reset HEAD"
    exit 0
fi

# 9. Commit
echo ""
echo "üì¶ Criando commit..."
git commit -m "ci: implementar configura√ß√£o completa de CI/CD

- Adicionar workflows principais (ci.yml, security.yml, code-quality.yml, auto-label.yml)
- Adicionar templates de PR e Issues
- Configurar dependabot e labeler
- Criar scripts de valida√ß√£o local (git hooks)
- Adicionar documenta√ß√£o completa de CI/CD
- Remover workflows antigos (deploy.yml, test.yml)

Implementa:
- ‚úÖ Pipeline CI/CD completo com GitHub Actions
- ‚úÖ Valida√ß√£o autom√°tica de PRs (lint, tests, E2E, security)
- ‚úÖ Branch Protection Rules configuradas
- ‚úÖ Dependabot para atualiza√ß√µes autom√°ticas
- ‚úÖ Templates padronizados de PR e Issues
- ‚úÖ Scripts de valida√ß√£o local com git hooks
- ‚úÖ Documenta√ß√£o completa do processo"

echo "   ‚úÖ Commit criado"
echo ""

# 10. Push
echo "üöÄ Enviando para GitHub..."
echo ""
echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso enviar√° para o reposit√≥rio remoto!"
read -p "Confirmar push para GitHub? (s/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[SsYy]$ ]]; then
    echo "‚ùå Push cancelado"
    echo ""
    echo "üí° O commit foi criado localmente. Para enviar depois:"
    echo "   git push origin main"
    exit 0
fi

git push origin main

echo ""
echo "‚úÖ SUCESSO!"
echo "==========="
echo ""
echo "üìä Pr√≥ximos passos:"
echo "1. Verificar workflows em: https://github.com/Tektrio/TATTOOPHOTOCALENDAR/actions"
echo "2. Configurar status checks obrigat√≥rios em Branch Protection"
echo "3. Criar PR de teste para validar configura√ß√£o"
echo ""
echo "üéâ CI/CD implementado com sucesso!"

