#!/bin/bash

# Script para iniciar o sistema e testar o Calend√°rio Visual Melhorado
# Uso: ./START_CALENDARIO.sh

echo "üöÄ =========================================="
echo "   INICIANDO SISTEMA AGENDA H√çBRIDA"
echo "   Calend√°rio Visual Melhorado v2.0"
echo "=========================================="
echo ""

# Cores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Verificar se est√° no diret√≥rio correto
if [ ! -d "agenda-hibrida-v2" ] || [ ! -d "agenda-hibrida-frontend" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script do diret√≥rio raiz do projeto!${NC}"
    exit 1
fi

echo -e "${BLUE}üì¶ Verificando depend√™ncias...${NC}"

# Verificar Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado! Instale o Node.js primeiro.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Node.js $(node -v)${NC}"

# Verificar npm
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm n√£o encontrado! Instale o npm primeiro.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ npm $(npm -v)${NC}"
echo ""

# Instalar depend√™ncias se necess√°rio
if [ ! -d "agenda-hibrida-v2/node_modules" ]; then
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias do backend...${NC}"
    cd agenda-hibrida-v2
    npm install
    cd ..
fi

if [ ! -d "agenda-hibrida-frontend/node_modules" ]; then
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias do frontend...${NC}"
    cd agenda-hibrida-frontend
    npm install
    cd ..
fi

echo ""
echo -e "${BLUE}üîß Criando arquivos de log...${NC}"
touch agenda-hibrida-v2/backend.log
touch agenda-hibrida-frontend/frontend.log

echo ""
echo -e "${GREEN}‚úÖ Tudo pronto para iniciar!${NC}"
echo ""
echo -e "${BLUE}=========================================="
echo "   INICIANDO SERVI√áOS"
echo "==========================================${NC}"
echo ""

# Fun√ß√£o para limpar processos ao sair
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Encerrando servi√ßos...${NC}"
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    echo -e "${GREEN}‚úÖ Servi√ßos encerrados com sucesso!${NC}"
    exit 0
}

trap cleanup SIGINT SIGTERM

# Iniciar backend
echo -e "${BLUE}üîµ Iniciando Backend (porta 3001)...${NC}"
cd agenda-hibrida-v2
npm start > backend.log 2>&1 &
BACKEND_PID=$!
cd ..

# Aguardar backend inicializar
echo -e "${YELLOW}‚è≥ Aguardando backend inicializar (5 segundos)...${NC}"
sleep 5

# Verificar se backend est√° rodando
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Erro ao iniciar backend! Verifique o log em agenda-hibrida-v2/backend.log${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Backend rodando (PID: $BACKEND_PID)${NC}"
echo ""

# Iniciar frontend
echo -e "${BLUE}üîµ Iniciando Frontend (porta 5173)...${NC}"
cd agenda-hibrida-frontend
npm run dev > frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# Aguardar frontend inicializar
echo -e "${YELLOW}‚è≥ Aguardando frontend inicializar (5 segundos)...${NC}"
sleep 5

# Verificar se frontend est√° rodando
if ! kill -0 $FRONTEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Erro ao iniciar frontend! Verifique o log em agenda-hibrida-frontend/frontend.log${NC}"
    kill $BACKEND_PID 2>/dev/null
    exit 1
fi

echo -e "${GREEN}‚úÖ Frontend rodando (PID: $FRONTEND_PID)${NC}"
echo ""

# Sistema iniciado com sucesso
echo -e "${GREEN}=========================================="
echo "   ‚úÖ SISTEMA INICIADO COM SUCESSO!"
echo "==========================================${NC}"
echo ""
echo -e "${BLUE}üìä Informa√ß√µes dos Servi√ßos:${NC}"
echo ""
echo -e "  ${GREEN}üîµ Backend:${NC}"
echo "     URL: http://localhost:3001"
echo "     PID: $BACKEND_PID"
echo "     Log: agenda-hibrida-v2/backend.log"
echo ""
echo -e "  ${GREEN}üîµ Frontend:${NC}"
echo "     URL: http://localhost:5173"
echo "     PID: $FRONTEND_PID"
echo "     Log: agenda-hibrida-frontend/frontend.log"
echo ""
echo -e "${YELLOW}=========================================="
echo "   üìã COMO TESTAR O CALEND√ÅRIO VISUAL"
echo "==========================================${NC}"
echo ""
echo "1. Abra o navegador em: ${GREEN}http://localhost:5173${NC}"
echo "2. Clique na aba ${GREEN}'Calend√°rio Visual'${NC}"
echo "3. Veja as informa√ß√µes completas dos agendamentos"
echo "4. ${GREEN}D√™ DUPLO CLIQUE${NC} em qualquer imagem para abrir a pasta!"
echo ""
echo -e "${BLUE}üìö Documenta√ß√£o:${NC}"
echo "   - CALENDARIO_VISUAL_MELHORADO.md"
echo "   - TESTAR_CALENDARIO_VISUAL.md"
echo "   - RESUMO_IMPLEMENTACAO_CALENDARIO.md"
echo ""
echo -e "${RED}‚ö†Ô∏è  Pressione Ctrl+C para parar os servi√ßos${NC}"
echo ""

# Abrir navegador automaticamente (opcional)
if command -v open &> /dev/null; then
    # macOS
    echo -e "${BLUE}üåê Abrindo navegador...${NC}"
    sleep 2
    open http://localhost:5173
elif command -v xdg-open &> /dev/null; then
    # Linux
    echo -e "${BLUE}üåê Abrindo navegador...${NC}"
    sleep 2
    xdg-open http://localhost:5173
elif command -v start &> /dev/null; then
    # Windows (Git Bash)
    echo -e "${BLUE}üåê Abrindo navegador...${NC}"
    sleep 2
    start http://localhost:5173
fi

# Manter script rodando e monitorar logs
echo -e "${YELLOW}üìù Monitorando logs (√∫ltimas 10 linhas)...${NC}"
echo ""

while true; do
    sleep 10
    
    # Verificar se processos ainda est√£o rodando
    if ! kill -0 $BACKEND_PID 2>/dev/null; then
        echo -e "${RED}‚ùå Backend parou inesperadamente!${NC}"
        echo -e "${YELLOW}√öltimas linhas do log:${NC}"
        tail -n 20 agenda-hibrida-v2/backend.log
        cleanup
    fi
    
    if ! kill -0 $FRONTEND_PID 2>/dev/null; then
        echo -e "${RED}‚ùå Frontend parou inesperadamente!${NC}"
        echo -e "${YELLOW}√öltimas linhas do log:${NC}"
        tail -n 20 agenda-hibrida-frontend/frontend.log
        cleanup
    fi
done

